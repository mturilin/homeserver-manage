#!/usr/bin/env python
import sys
import types

try:
    import click
except ImportError:
    print >> sys.stderr, "Homeserver: Error, can't find command line libraries. Please activate virtualenv!"

import os
import yaml
import click
import subprocess

__author__ = 'michaelturilin'

SERVICE_ORDER = [
    "host",
    "users",
    "avahi",
    "samba",
    "afp",
    "docker",
    "btsync",
    "openvpn",
    "transmission",
    "plex",
]

SERVICES_DIR = os.path.dirname(__file__)


def load_config(configfile):
    if not os.path.exists(configfile):
        subprocess.call(["sudo", "cp", SERVICES_DIR + '/localhost.default', configfile])
        # shutil.copyfile(SERVICES_DIR + '/localhost.default', configfile)

    # read config
    return yaml.load(open(configfile))


@click.group()
@click.option('--configfile', default='/etc/ansible/host_vars/localhost', help='path to the config file')
@click.option('--verbose', default=False, is_flag=True, help='print additional info')
@click.pass_context
def cli(ctx, configfile, verbose):
    if verbose:
        click.echo('Reading configuration from %s' % configfile)

    ctx.obj['verbose'] = verbose
    ctx.obj['configfile'] = configfile

    config = load_config(configfile)
    ctx.obj['config'] = config


@click.command()
@click.pass_context
def list_services(ctx):
    # for each service
    for service in SERVICE_ORDER:
        print "-", service


def lookup(collection, comp):
    try:
        return collection[comp]
    except (KeyError, TypeError):
        pass

    try:
        return collection[int(comp)]
    except (IndexError, TypeError, ValueError):
        pass

    try:
        return getattr(collection, comp)
    except AttributeError:
        pass

    raise LookupError("Name '%s' is not found" % comp)


@click.command()
@click.argument('var_name')
@click.pass_context
def get_var(ctx, var_name):
    current_var = ctx.obj['config']
    var_path = var_name.split(".")
    for var_comp in var_path:
        try:
            current_var = lookup(current_var, var_comp)
        except LookupError as err:
            print >> sys.stderr, err
            sys.exit(1)

    print current_var


@click.command()
@click.argument('service_name')
@click.pass_context
def update_service(ctx, service_name):
    if service_name in SERVICE_ORDER:
        _update_service(ctx, service_name)
    elif service_name == "ALL":
        for sn in SERVICE_ORDER:
            _update_service(ctx, sn)
    else:
        click.echo('Unknown service name "%s"' % service_name)
        sys.exit(1)


BOOLEANS_TRUE = ['yes', 'on', '1', 'true', 1]
BOOLEANS_FALSE = ['no', 'off', '0', 'false', 0]


def ansible_boolean(arg):
    """ return a bool for the arg """
    if arg is None or type(arg) == bool:
        return arg
    if type(arg) in types.StringTypes:
        arg = arg.lower()
    if arg in BOOLEANS_TRUE:
        return True
    elif arg in BOOLEANS_FALSE:
        return False
    else:
        raise ValueError("'%s' is not boolean" % arg)


def _update_service(ctx, service_name):
    click.echo('Updating service "%s"' % service_name)
    config = ctx.obj['config']

    if not ansible_boolean(config.get(service_name + "_enabled", False)):
        click.echo("Skipping. Service is not enabled in the config!")
        return

    # trying to execute playbook
    playbook_path = '/'.join([SERVICES_DIR, service_name, service_name + ".yml"])
    if os.path.exists(playbook_path):
        ansible_run_playbook(playbook_path)
    else:
        # trying to execute python script
        script_path = '/'.join([SERVICES_DIR, service_name, service_name + ".py"])
        if os.path.exists(script_path):
            subprocess.call(["python", script_path])




def ansible_run_playbook(playbook_path):
    # pb = PlayBook(playbook=playbook_path, transport='local')
    # pb.run()
    subprocess.call(["ansible-playbook", playbook_path, "-c", "local"])


cli.add_command(list_services)
cli.add_command(update_service)
cli.add_command(get_var)

if __name__ == "__main__":
    cli(obj={})
